Shader "Unlit Master"
{
    Properties
    {
        Vector1_15FADA96("Scroll Speed ", Float) = 0.5
Color_7176E005("Color1", Color) = (1,1,1,0)
Color_ACAEBCDF("Color2", Color) = (0.1237366,0.0789872,0.2358491,0)
Vector1_BF41A06("Cloud Cover ", Float) = 0.5
Vector1_AA42E5E6("Additional Fallof ", Float) = 1
Vector1_3FA1EBE5("Density ", Float) = 0.5

    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="LightweightPipeline"
            "RenderType"="Transparent"
            "Queue"="Transparent+0"
        }
        Pass
        {
            // Material options generated by graph

            Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha

            Cull Back

            ZTest LEqual

            ZWrite On

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            // -------------------------------------
            // Lightweight Pipeline keywords
            #pragma shader_feature _SAMPLE_GI

            // -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing
            
            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            // Lighting include is needed because of GI
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/Shaders/UnlitInput.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float Vector1_15FADA96;
            float4 Color_7176E005;
            float4 Color_ACAEBCDF;
            float Vector1_BF41A06;
            float Vector1_AA42E5E6;
            float Vector1_3FA1EBE5;
            CBUFFER_END

            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
                float3 WorldSpacePosition;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                float3 WorldSpacePosition;
                float4 ScreenPosition;
                float3 TimeParameters;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }


        float2 Unity_GradientNoise_Dir_float(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { 
                float2 p = UV * Scale;
                float2 ip = floor(p);
                float2 fp = frac(p);
                float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
                float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
                float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
                float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
                fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
                Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
            }


        inline float Unity_SimpleNoise_RandomValue_float (float2 uv)
        {
            return frac(sin(dot(uv, float2(12.9898, 78.233)))*43758.5453);
        }

        inline float Unity_SimpleNnoise_Interpolate_float (float a, float b, float t)
        {
            return (1.0-t)*a + (t*b);
        }


        inline float Unity_SimpleNoise_ValueNoise_float (float2 uv)
        {
            float2 i = floor(uv);
            float2 f = frac(uv);
            f = f * f * (3.0 - 2.0 * f);

            uv = abs(frac(uv) - 0.5);
            float2 c0 = i + float2(0.0, 0.0);
            float2 c1 = i + float2(1.0, 0.0);
            float2 c2 = i + float2(0.0, 1.0);
            float2 c3 = i + float2(1.0, 1.0);
            float r0 = Unity_SimpleNoise_RandomValue_float(c0);
            float r1 = Unity_SimpleNoise_RandomValue_float(c1);
            float r2 = Unity_SimpleNoise_RandomValue_float(c2);
            float r3 = Unity_SimpleNoise_RandomValue_float(c3);

            float bottomOfGrid = Unity_SimpleNnoise_Interpolate_float(r0, r1, f.x);
            float topOfGrid = Unity_SimpleNnoise_Interpolate_float(r2, r3, f.x);
            float t = Unity_SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);
            return t;
        }
            void Unity_SimpleNoise_float(float2 UV, float Scale, out float Out)
            {
                float t = 0.0;

                float freq = pow(2.0, float(0));
                float amp = pow(0.5, float(3-0));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                freq = pow(2.0, float(1));
                amp = pow(0.5, float(3-1));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                freq = pow(2.0, float(2));
                amp = pow(0.5, float(3-2));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                Out = t;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
            {
                Out = lerp(A, B, T);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Split_DE3CFFCB_R_1 = IN.WorldSpacePosition[0];
                float _Split_DE3CFFCB_G_2 = IN.WorldSpacePosition[1];
                float _Split_DE3CFFCB_B_3 = IN.WorldSpacePosition[2];
                float _Split_DE3CFFCB_A_4 = 0;
                float2 _Vector2_85214D23_Out_0 = float2(_Split_DE3CFFCB_R_1, _Split_DE3CFFCB_B_3);
                float _Property_DAF07B40_Out_0 = Vector1_15FADA96;
                float _Multiply_965B5DF_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_DAF07B40_Out_0, _Multiply_965B5DF_Out_2);
                float _Multiply_9F66C43B_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 0.5, _Multiply_9F66C43B_Out_2);
                float2 _Add_E3291921_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_9F66C43B_Out_2.xx), _Add_E3291921_Out_2);
                float _GradientNoise_D087444B_Out_2;
                Unity_GradientNoise_float(_Add_E3291921_Out_2, 0.1, _GradientNoise_D087444B_Out_2);
                float _Multiply_61777F9A_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 1, _Multiply_61777F9A_Out_2);
                float2 _Add_7321A819_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_7321A819_Out_2);
                float _SimpleNoise_D5B9AF4B_Out_2;
                Unity_SimpleNoise_float(_Add_7321A819_Out_2, 1, _SimpleNoise_D5B9AF4B_Out_2);
                float _Add_E370E79D_Out_2;
                Unity_Add_float(_GradientNoise_D087444B_Out_2, _SimpleNoise_D5B9AF4B_Out_2, _Add_E370E79D_Out_2);
                float2 _Add_E9FF1762_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_E9FF1762_Out_2);
                float _SimpleNoise_66B04194_Out_2;
                Unity_SimpleNoise_float(_Add_E9FF1762_Out_2, 0.5, _SimpleNoise_66B04194_Out_2);
                float _Multiply_24F891FB_Out_2;
                Unity_Multiply_float(_Add_E370E79D_Out_2, _SimpleNoise_66B04194_Out_2, _Multiply_24F891FB_Out_2);
                float _Subtract_2F2DB0F2_Out_2;
                Unity_Subtract_float(_Multiply_24F891FB_Out_2, 0.5, _Subtract_2F2DB0F2_Out_2);
                float3 _Vector3_471A0857_Out_0 = float3(0, _Subtract_2F2DB0F2_Out_2, 0);
                float3 _Multiply_B6D849F8_Out_2;
                Unity_Multiply_float(_Vector3_471A0857_Out_0, float3(length(float3(UNITY_MATRIX_M[0].x, UNITY_MATRIX_M[1].x, UNITY_MATRIX_M[2].x)),
                                     length(float3(UNITY_MATRIX_M[0].y, UNITY_MATRIX_M[1].y, UNITY_MATRIX_M[2].y)),
                                     length(float3(UNITY_MATRIX_M[0].z, UNITY_MATRIX_M[1].z, UNITY_MATRIX_M[2].z))), _Multiply_B6D849F8_Out_2);
                float3 _Add_FB9916A6_Out_2;
                Unity_Add_float3(IN.WorldSpacePosition, _Multiply_B6D849F8_Out_2, _Add_FB9916A6_Out_2);
                float3 _Transform_C52F9C96_Out_1 = TransformWorldToObject(_Add_FB9916A6_Out_2.xyz);
                description.Position = _Transform_C52F9C96_Out_1;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Color;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _Property_B3C0FAF8_Out_0 = Color_7176E005;
                float4 _Property_7183633F_Out_0 = Color_ACAEBCDF;
                float _Split_DE3CFFCB_R_1 = IN.WorldSpacePosition[0];
                float _Split_DE3CFFCB_G_2 = IN.WorldSpacePosition[1];
                float _Split_DE3CFFCB_B_3 = IN.WorldSpacePosition[2];
                float _Split_DE3CFFCB_A_4 = 0;
                float2 _Vector2_85214D23_Out_0 = float2(_Split_DE3CFFCB_R_1, _Split_DE3CFFCB_B_3);
                float _Property_DAF07B40_Out_0 = Vector1_15FADA96;
                float _Multiply_965B5DF_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_DAF07B40_Out_0, _Multiply_965B5DF_Out_2);
                float _Multiply_9F66C43B_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 0.5, _Multiply_9F66C43B_Out_2);
                float2 _Add_E3291921_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_9F66C43B_Out_2.xx), _Add_E3291921_Out_2);
                float _GradientNoise_D087444B_Out_2;
                Unity_GradientNoise_float(_Add_E3291921_Out_2, 0.1, _GradientNoise_D087444B_Out_2);
                float _Multiply_61777F9A_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 1, _Multiply_61777F9A_Out_2);
                float2 _Add_7321A819_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_7321A819_Out_2);
                float _SimpleNoise_D5B9AF4B_Out_2;
                Unity_SimpleNoise_float(_Add_7321A819_Out_2, 1, _SimpleNoise_D5B9AF4B_Out_2);
                float _Add_E370E79D_Out_2;
                Unity_Add_float(_GradientNoise_D087444B_Out_2, _SimpleNoise_D5B9AF4B_Out_2, _Add_E370E79D_Out_2);
                float2 _Add_E9FF1762_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_E9FF1762_Out_2);
                float _SimpleNoise_66B04194_Out_2;
                Unity_SimpleNoise_float(_Add_E9FF1762_Out_2, 0.5, _SimpleNoise_66B04194_Out_2);
                float _Multiply_24F891FB_Out_2;
                Unity_Multiply_float(_Add_E370E79D_Out_2, _SimpleNoise_66B04194_Out_2, _Multiply_24F891FB_Out_2);
                float _Saturate_B871BC40_Out_1;
                Unity_Saturate_float(_Multiply_24F891FB_Out_2, _Saturate_B871BC40_Out_1);
                float4 _Lerp_17736A77_Out_3;
                Unity_Lerp_float4(_Property_B3C0FAF8_Out_0, _Property_7183633F_Out_0, (_Saturate_B871BC40_Out_1.xxxx), _Lerp_17736A77_Out_3);
                float _Property_61DD5286_Out_0 = Vector1_BF41A06;
                float _Multiply_43B270FF_Out_2;
                Unity_Multiply_float(_Property_61DD5286_Out_0, 2, _Multiply_43B270FF_Out_2);
                float _Property_28B3FE78_Out_0 = Vector1_AA42E5E6;
                float _Add_9C2990_Out_2;
                Unity_Add_float(_Multiply_43B270FF_Out_2, _Property_28B3FE78_Out_0, _Add_9C2990_Out_2);
                float _Smoothstep_261571F5_Out_3;
                Unity_Smoothstep_float(_Property_61DD5286_Out_0, _Add_9C2990_Out_2, _Multiply_24F891FB_Out_2, _Smoothstep_261571F5_Out_3);
                float _SceneDepth_9A3A7120_Out_1;
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_9A3A7120_Out_1);
                float4 _ScreenPosition_DF5CB423_Out_0 = IN.ScreenPosition;
                float _Split_645B1D36_R_1 = _ScreenPosition_DF5CB423_Out_0[0];
                float _Split_645B1D36_G_2 = _ScreenPosition_DF5CB423_Out_0[1];
                float _Split_645B1D36_B_3 = _ScreenPosition_DF5CB423_Out_0[2];
                float _Split_645B1D36_A_4 = _ScreenPosition_DF5CB423_Out_0[3];
                float _Subtract_8127378B_Out_2;
                Unity_Subtract_float(_SceneDepth_9A3A7120_Out_1, _Split_645B1D36_A_4, _Subtract_8127378B_Out_2);
                float _Property_CF5C73F5_Out_0 = Vector1_3FA1EBE5;
                float _Multiply_9BDCF9C9_Out_2;
                Unity_Multiply_float(_Subtract_8127378B_Out_2, _Property_CF5C73F5_Out_0, _Multiply_9BDCF9C9_Out_2);
                float _Saturate_F94D553E_Out_1;
                Unity_Saturate_float(_Multiply_9BDCF9C9_Out_2, _Saturate_F94D553E_Out_1);
                float _Multiply_503736F2_Out_2;
                Unity_Multiply_float(_Smoothstep_261571F5_Out_3, _Saturate_F94D553E_Out_1, _Multiply_503736F2_Out_2);
                surface.Color = (_Lerp_17736A77_Out_3.xyz);
                surface.Alpha = _Multiply_503736F2_Out_2;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct GraphVertexOutput
            {
                float4 position : POSITION;

                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            GraphVertexOutput vert (GraphVertexInput v)
            {
                GraphVertexOutput o = (GraphVertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.WorldSpaceTangent = WorldSpaceTangent;
                vdi.WorldSpaceBiTangent = WorldSpaceBiTangent;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.TimeParameters = _TimeParameters.xyz;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

				 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);

                o.position = TransformObjectToHClip(v.vertex.xyz);
                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                return o;
            }

            half4 frag (GraphVertexOutput IN ) : SV_Target
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                
                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;
                // Surface description inputs defined by graph
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.TimeParameters = _TimeParameters.xyz;


                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);
                float3 Color = float3(0.5, 0.5, 0.5);
                float Alpha = 1;
                float AlphaClipThreshold = 0;
                // Surface description remap performed by graph
                Color = surf.Color;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

                
         #if _AlphaClip
                clip(Alpha - AlphaClipThreshold);
        #endif
                return half4(Color, Alpha);
            }
            ENDHLSL
        }
        Pass
        {
            Name "ShadowCaster"
            Tags{"LightMode" = "ShadowCaster"}

            ZWrite On ZTest LEqual

            // Material options generated by graph
            Cull Back

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float Vector1_15FADA96;
            float4 Color_7176E005;
            float4 Color_ACAEBCDF;
            float Vector1_BF41A06;
            float Vector1_AA42E5E6;
            float Vector1_3FA1EBE5;
            CBUFFER_END

            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
                float3 WorldSpacePosition;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                float3 WorldSpacePosition;
                float4 ScreenPosition;
                float3 TimeParameters;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }


        float2 Unity_GradientNoise_Dir_float(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { 
                float2 p = UV * Scale;
                float2 ip = floor(p);
                float2 fp = frac(p);
                float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
                float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
                float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
                float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
                fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
                Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
            }


        inline float Unity_SimpleNoise_RandomValue_float (float2 uv)
        {
            return frac(sin(dot(uv, float2(12.9898, 78.233)))*43758.5453);
        }

        inline float Unity_SimpleNnoise_Interpolate_float (float a, float b, float t)
        {
            return (1.0-t)*a + (t*b);
        }


        inline float Unity_SimpleNoise_ValueNoise_float (float2 uv)
        {
            float2 i = floor(uv);
            float2 f = frac(uv);
            f = f * f * (3.0 - 2.0 * f);

            uv = abs(frac(uv) - 0.5);
            float2 c0 = i + float2(0.0, 0.0);
            float2 c1 = i + float2(1.0, 0.0);
            float2 c2 = i + float2(0.0, 1.0);
            float2 c3 = i + float2(1.0, 1.0);
            float r0 = Unity_SimpleNoise_RandomValue_float(c0);
            float r1 = Unity_SimpleNoise_RandomValue_float(c1);
            float r2 = Unity_SimpleNoise_RandomValue_float(c2);
            float r3 = Unity_SimpleNoise_RandomValue_float(c3);

            float bottomOfGrid = Unity_SimpleNnoise_Interpolate_float(r0, r1, f.x);
            float topOfGrid = Unity_SimpleNnoise_Interpolate_float(r2, r3, f.x);
            float t = Unity_SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);
            return t;
        }
            void Unity_SimpleNoise_float(float2 UV, float Scale, out float Out)
            {
                float t = 0.0;

                float freq = pow(2.0, float(0));
                float amp = pow(0.5, float(3-0));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                freq = pow(2.0, float(1));
                amp = pow(0.5, float(3-1));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                freq = pow(2.0, float(2));
                amp = pow(0.5, float(3-2));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                Out = t;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Split_DE3CFFCB_R_1 = IN.WorldSpacePosition[0];
                float _Split_DE3CFFCB_G_2 = IN.WorldSpacePosition[1];
                float _Split_DE3CFFCB_B_3 = IN.WorldSpacePosition[2];
                float _Split_DE3CFFCB_A_4 = 0;
                float2 _Vector2_85214D23_Out_0 = float2(_Split_DE3CFFCB_R_1, _Split_DE3CFFCB_B_3);
                float _Property_DAF07B40_Out_0 = Vector1_15FADA96;
                float _Multiply_965B5DF_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_DAF07B40_Out_0, _Multiply_965B5DF_Out_2);
                float _Multiply_9F66C43B_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 0.5, _Multiply_9F66C43B_Out_2);
                float2 _Add_E3291921_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_9F66C43B_Out_2.xx), _Add_E3291921_Out_2);
                float _GradientNoise_D087444B_Out_2;
                Unity_GradientNoise_float(_Add_E3291921_Out_2, 0.1, _GradientNoise_D087444B_Out_2);
                float _Multiply_61777F9A_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 1, _Multiply_61777F9A_Out_2);
                float2 _Add_7321A819_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_7321A819_Out_2);
                float _SimpleNoise_D5B9AF4B_Out_2;
                Unity_SimpleNoise_float(_Add_7321A819_Out_2, 1, _SimpleNoise_D5B9AF4B_Out_2);
                float _Add_E370E79D_Out_2;
                Unity_Add_float(_GradientNoise_D087444B_Out_2, _SimpleNoise_D5B9AF4B_Out_2, _Add_E370E79D_Out_2);
                float2 _Add_E9FF1762_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_E9FF1762_Out_2);
                float _SimpleNoise_66B04194_Out_2;
                Unity_SimpleNoise_float(_Add_E9FF1762_Out_2, 0.5, _SimpleNoise_66B04194_Out_2);
                float _Multiply_24F891FB_Out_2;
                Unity_Multiply_float(_Add_E370E79D_Out_2, _SimpleNoise_66B04194_Out_2, _Multiply_24F891FB_Out_2);
                float _Subtract_2F2DB0F2_Out_2;
                Unity_Subtract_float(_Multiply_24F891FB_Out_2, 0.5, _Subtract_2F2DB0F2_Out_2);
                float3 _Vector3_471A0857_Out_0 = float3(0, _Subtract_2F2DB0F2_Out_2, 0);
                float3 _Multiply_B6D849F8_Out_2;
                Unity_Multiply_float(_Vector3_471A0857_Out_0, float3(length(float3(UNITY_MATRIX_M[0].x, UNITY_MATRIX_M[1].x, UNITY_MATRIX_M[2].x)),
                                     length(float3(UNITY_MATRIX_M[0].y, UNITY_MATRIX_M[1].y, UNITY_MATRIX_M[2].y)),
                                     length(float3(UNITY_MATRIX_M[0].z, UNITY_MATRIX_M[1].z, UNITY_MATRIX_M[2].z))), _Multiply_B6D849F8_Out_2);
                float3 _Add_FB9916A6_Out_2;
                Unity_Add_float3(IN.WorldSpacePosition, _Multiply_B6D849F8_Out_2, _Add_FB9916A6_Out_2);
                float3 _Transform_C52F9C96_Out_1 = TransformWorldToObject(_Add_FB9916A6_Out_2.xyz);
                description.Position = _Transform_C52F9C96_Out_1;
                return description;
            }

            struct SurfaceDescription
            {
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _Property_61DD5286_Out_0 = Vector1_BF41A06;
                float _Multiply_43B270FF_Out_2;
                Unity_Multiply_float(_Property_61DD5286_Out_0, 2, _Multiply_43B270FF_Out_2);
                float _Property_28B3FE78_Out_0 = Vector1_AA42E5E6;
                float _Add_9C2990_Out_2;
                Unity_Add_float(_Multiply_43B270FF_Out_2, _Property_28B3FE78_Out_0, _Add_9C2990_Out_2);
                float _Split_DE3CFFCB_R_1 = IN.WorldSpacePosition[0];
                float _Split_DE3CFFCB_G_2 = IN.WorldSpacePosition[1];
                float _Split_DE3CFFCB_B_3 = IN.WorldSpacePosition[2];
                float _Split_DE3CFFCB_A_4 = 0;
                float2 _Vector2_85214D23_Out_0 = float2(_Split_DE3CFFCB_R_1, _Split_DE3CFFCB_B_3);
                float _Property_DAF07B40_Out_0 = Vector1_15FADA96;
                float _Multiply_965B5DF_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_DAF07B40_Out_0, _Multiply_965B5DF_Out_2);
                float _Multiply_9F66C43B_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 0.5, _Multiply_9F66C43B_Out_2);
                float2 _Add_E3291921_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_9F66C43B_Out_2.xx), _Add_E3291921_Out_2);
                float _GradientNoise_D087444B_Out_2;
                Unity_GradientNoise_float(_Add_E3291921_Out_2, 0.1, _GradientNoise_D087444B_Out_2);
                float _Multiply_61777F9A_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 1, _Multiply_61777F9A_Out_2);
                float2 _Add_7321A819_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_7321A819_Out_2);
                float _SimpleNoise_D5B9AF4B_Out_2;
                Unity_SimpleNoise_float(_Add_7321A819_Out_2, 1, _SimpleNoise_D5B9AF4B_Out_2);
                float _Add_E370E79D_Out_2;
                Unity_Add_float(_GradientNoise_D087444B_Out_2, _SimpleNoise_D5B9AF4B_Out_2, _Add_E370E79D_Out_2);
                float2 _Add_E9FF1762_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_E9FF1762_Out_2);
                float _SimpleNoise_66B04194_Out_2;
                Unity_SimpleNoise_float(_Add_E9FF1762_Out_2, 0.5, _SimpleNoise_66B04194_Out_2);
                float _Multiply_24F891FB_Out_2;
                Unity_Multiply_float(_Add_E370E79D_Out_2, _SimpleNoise_66B04194_Out_2, _Multiply_24F891FB_Out_2);
                float _Smoothstep_261571F5_Out_3;
                Unity_Smoothstep_float(_Property_61DD5286_Out_0, _Add_9C2990_Out_2, _Multiply_24F891FB_Out_2, _Smoothstep_261571F5_Out_3);
                float _SceneDepth_9A3A7120_Out_1;
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_9A3A7120_Out_1);
                float4 _ScreenPosition_DF5CB423_Out_0 = IN.ScreenPosition;
                float _Split_645B1D36_R_1 = _ScreenPosition_DF5CB423_Out_0[0];
                float _Split_645B1D36_G_2 = _ScreenPosition_DF5CB423_Out_0[1];
                float _Split_645B1D36_B_3 = _ScreenPosition_DF5CB423_Out_0[2];
                float _Split_645B1D36_A_4 = _ScreenPosition_DF5CB423_Out_0[3];
                float _Subtract_8127378B_Out_2;
                Unity_Subtract_float(_SceneDepth_9A3A7120_Out_1, _Split_645B1D36_A_4, _Subtract_8127378B_Out_2);
                float _Property_CF5C73F5_Out_0 = Vector1_3FA1EBE5;
                float _Multiply_9BDCF9C9_Out_2;
                Unity_Multiply_float(_Subtract_8127378B_Out_2, _Property_CF5C73F5_Out_0, _Multiply_9BDCF9C9_Out_2);
                float _Saturate_F94D553E_Out_1;
                Unity_Saturate_float(_Multiply_9BDCF9C9_Out_2, _Saturate_F94D553E_Out_1);
                float _Multiply_503736F2_Out_2;
                Unity_Multiply_float(_Smoothstep_261571F5_Out_3, _Saturate_F94D553E_Out_1, _Multiply_503736F2_Out_2);
                surface.Alpha = _Multiply_503736F2_Out_2;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct VertexOutput
            {
                float2 uv           : TEXCOORD0;
                float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            float3 _LightDirection;

            VertexOutput ShadowPassVertex(GraphVertexInput v)
            {
                VertexOutput o;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.WorldSpaceTangent = WorldSpaceTangent;
                vdi.WorldSpaceBiTangent = WorldSpaceBiTangent;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.TimeParameters = _TimeParameters.xyz;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                
                float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
                float3 normalWS = TransformObjectToWorldNormal(v.normal);

                float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

            #if UNITY_REVERSED_Z
                clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
            #else
                clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
            #endif
                o.clipPos = clipPos;

                return o;
            }

            half4 ShadowPassFragment(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.TimeParameters = _TimeParameters.xyz;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }

            ENDHLSL
        }

        Pass
        {
            Name "DepthOnly"
            Tags{"LightMode" = "DepthOnly"}

            ZWrite On
            ColorMask 0

            // Material options generated by graph
            Cull Back

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float Vector1_15FADA96;
            float4 Color_7176E005;
            float4 Color_ACAEBCDF;
            float Vector1_BF41A06;
            float Vector1_AA42E5E6;
            float Vector1_3FA1EBE5;
            CBUFFER_END

            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
                float3 WorldSpacePosition;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                float3 WorldSpacePosition;
                float4 ScreenPosition;
                float3 TimeParameters;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }


        float2 Unity_GradientNoise_Dir_float(float2 p)
        {
            // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
            p = p % 289;
            float x = (34 * p.x + 1) * p.x % 289 + p.y;
            x = (34 * x + 1) * x % 289;
            x = frac(x / 41) * 2 - 1;
            return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
        }

            void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
            { 
                float2 p = UV * Scale;
                float2 ip = floor(p);
                float2 fp = frac(p);
                float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
                float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
                float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
                float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
                fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
                Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
            }


        inline float Unity_SimpleNoise_RandomValue_float (float2 uv)
        {
            return frac(sin(dot(uv, float2(12.9898, 78.233)))*43758.5453);
        }

        inline float Unity_SimpleNnoise_Interpolate_float (float a, float b, float t)
        {
            return (1.0-t)*a + (t*b);
        }


        inline float Unity_SimpleNoise_ValueNoise_float (float2 uv)
        {
            float2 i = floor(uv);
            float2 f = frac(uv);
            f = f * f * (3.0 - 2.0 * f);

            uv = abs(frac(uv) - 0.5);
            float2 c0 = i + float2(0.0, 0.0);
            float2 c1 = i + float2(1.0, 0.0);
            float2 c2 = i + float2(0.0, 1.0);
            float2 c3 = i + float2(1.0, 1.0);
            float r0 = Unity_SimpleNoise_RandomValue_float(c0);
            float r1 = Unity_SimpleNoise_RandomValue_float(c1);
            float r2 = Unity_SimpleNoise_RandomValue_float(c2);
            float r3 = Unity_SimpleNoise_RandomValue_float(c3);

            float bottomOfGrid = Unity_SimpleNnoise_Interpolate_float(r0, r1, f.x);
            float topOfGrid = Unity_SimpleNnoise_Interpolate_float(r2, r3, f.x);
            float t = Unity_SimpleNnoise_Interpolate_float(bottomOfGrid, topOfGrid, f.y);
            return t;
        }
            void Unity_SimpleNoise_float(float2 UV, float Scale, out float Out)
            {
                float t = 0.0;

                float freq = pow(2.0, float(0));
                float amp = pow(0.5, float(3-0));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                freq = pow(2.0, float(1));
                amp = pow(0.5, float(3-1));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                freq = pow(2.0, float(2));
                amp = pow(0.5, float(3-2));
                t += Unity_SimpleNoise_ValueNoise_float(float2(UV.x*Scale/freq, UV.y*Scale/freq))*amp;

                Out = t;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Subtract_float(float A, float B, out float Out)
            {
                Out = A - B;
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_SceneDepth_Eye_float(float4 UV, out float Out)
            {
                Out = LinearEyeDepth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Saturate_float(float In, out float Out)
            {
                Out = saturate(In);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Split_DE3CFFCB_R_1 = IN.WorldSpacePosition[0];
                float _Split_DE3CFFCB_G_2 = IN.WorldSpacePosition[1];
                float _Split_DE3CFFCB_B_3 = IN.WorldSpacePosition[2];
                float _Split_DE3CFFCB_A_4 = 0;
                float2 _Vector2_85214D23_Out_0 = float2(_Split_DE3CFFCB_R_1, _Split_DE3CFFCB_B_3);
                float _Property_DAF07B40_Out_0 = Vector1_15FADA96;
                float _Multiply_965B5DF_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_DAF07B40_Out_0, _Multiply_965B5DF_Out_2);
                float _Multiply_9F66C43B_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 0.5, _Multiply_9F66C43B_Out_2);
                float2 _Add_E3291921_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_9F66C43B_Out_2.xx), _Add_E3291921_Out_2);
                float _GradientNoise_D087444B_Out_2;
                Unity_GradientNoise_float(_Add_E3291921_Out_2, 0.1, _GradientNoise_D087444B_Out_2);
                float _Multiply_61777F9A_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 1, _Multiply_61777F9A_Out_2);
                float2 _Add_7321A819_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_7321A819_Out_2);
                float _SimpleNoise_D5B9AF4B_Out_2;
                Unity_SimpleNoise_float(_Add_7321A819_Out_2, 1, _SimpleNoise_D5B9AF4B_Out_2);
                float _Add_E370E79D_Out_2;
                Unity_Add_float(_GradientNoise_D087444B_Out_2, _SimpleNoise_D5B9AF4B_Out_2, _Add_E370E79D_Out_2);
                float2 _Add_E9FF1762_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_E9FF1762_Out_2);
                float _SimpleNoise_66B04194_Out_2;
                Unity_SimpleNoise_float(_Add_E9FF1762_Out_2, 0.5, _SimpleNoise_66B04194_Out_2);
                float _Multiply_24F891FB_Out_2;
                Unity_Multiply_float(_Add_E370E79D_Out_2, _SimpleNoise_66B04194_Out_2, _Multiply_24F891FB_Out_2);
                float _Subtract_2F2DB0F2_Out_2;
                Unity_Subtract_float(_Multiply_24F891FB_Out_2, 0.5, _Subtract_2F2DB0F2_Out_2);
                float3 _Vector3_471A0857_Out_0 = float3(0, _Subtract_2F2DB0F2_Out_2, 0);
                float3 _Multiply_B6D849F8_Out_2;
                Unity_Multiply_float(_Vector3_471A0857_Out_0, float3(length(float3(UNITY_MATRIX_M[0].x, UNITY_MATRIX_M[1].x, UNITY_MATRIX_M[2].x)),
                                     length(float3(UNITY_MATRIX_M[0].y, UNITY_MATRIX_M[1].y, UNITY_MATRIX_M[2].y)),
                                     length(float3(UNITY_MATRIX_M[0].z, UNITY_MATRIX_M[1].z, UNITY_MATRIX_M[2].z))), _Multiply_B6D849F8_Out_2);
                float3 _Add_FB9916A6_Out_2;
                Unity_Add_float3(IN.WorldSpacePosition, _Multiply_B6D849F8_Out_2, _Add_FB9916A6_Out_2);
                float3 _Transform_C52F9C96_Out_1 = TransformWorldToObject(_Add_FB9916A6_Out_2.xyz);
                description.Position = _Transform_C52F9C96_Out_1;
                return description;
            }

            struct SurfaceDescription
            {
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _Property_61DD5286_Out_0 = Vector1_BF41A06;
                float _Multiply_43B270FF_Out_2;
                Unity_Multiply_float(_Property_61DD5286_Out_0, 2, _Multiply_43B270FF_Out_2);
                float _Property_28B3FE78_Out_0 = Vector1_AA42E5E6;
                float _Add_9C2990_Out_2;
                Unity_Add_float(_Multiply_43B270FF_Out_2, _Property_28B3FE78_Out_0, _Add_9C2990_Out_2);
                float _Split_DE3CFFCB_R_1 = IN.WorldSpacePosition[0];
                float _Split_DE3CFFCB_G_2 = IN.WorldSpacePosition[1];
                float _Split_DE3CFFCB_B_3 = IN.WorldSpacePosition[2];
                float _Split_DE3CFFCB_A_4 = 0;
                float2 _Vector2_85214D23_Out_0 = float2(_Split_DE3CFFCB_R_1, _Split_DE3CFFCB_B_3);
                float _Property_DAF07B40_Out_0 = Vector1_15FADA96;
                float _Multiply_965B5DF_Out_2;
                Unity_Multiply_float(IN.TimeParameters.x, _Property_DAF07B40_Out_0, _Multiply_965B5DF_Out_2);
                float _Multiply_9F66C43B_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 0.5, _Multiply_9F66C43B_Out_2);
                float2 _Add_E3291921_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_9F66C43B_Out_2.xx), _Add_E3291921_Out_2);
                float _GradientNoise_D087444B_Out_2;
                Unity_GradientNoise_float(_Add_E3291921_Out_2, 0.1, _GradientNoise_D087444B_Out_2);
                float _Multiply_61777F9A_Out_2;
                Unity_Multiply_float(_Multiply_965B5DF_Out_2, 1, _Multiply_61777F9A_Out_2);
                float2 _Add_7321A819_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_7321A819_Out_2);
                float _SimpleNoise_D5B9AF4B_Out_2;
                Unity_SimpleNoise_float(_Add_7321A819_Out_2, 1, _SimpleNoise_D5B9AF4B_Out_2);
                float _Add_E370E79D_Out_2;
                Unity_Add_float(_GradientNoise_D087444B_Out_2, _SimpleNoise_D5B9AF4B_Out_2, _Add_E370E79D_Out_2);
                float2 _Add_E9FF1762_Out_2;
                Unity_Add_float2(_Vector2_85214D23_Out_0, (_Multiply_61777F9A_Out_2.xx), _Add_E9FF1762_Out_2);
                float _SimpleNoise_66B04194_Out_2;
                Unity_SimpleNoise_float(_Add_E9FF1762_Out_2, 0.5, _SimpleNoise_66B04194_Out_2);
                float _Multiply_24F891FB_Out_2;
                Unity_Multiply_float(_Add_E370E79D_Out_2, _SimpleNoise_66B04194_Out_2, _Multiply_24F891FB_Out_2);
                float _Smoothstep_261571F5_Out_3;
                Unity_Smoothstep_float(_Property_61DD5286_Out_0, _Add_9C2990_Out_2, _Multiply_24F891FB_Out_2, _Smoothstep_261571F5_Out_3);
                float _SceneDepth_9A3A7120_Out_1;
                Unity_SceneDepth_Eye_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_9A3A7120_Out_1);
                float4 _ScreenPosition_DF5CB423_Out_0 = IN.ScreenPosition;
                float _Split_645B1D36_R_1 = _ScreenPosition_DF5CB423_Out_0[0];
                float _Split_645B1D36_G_2 = _ScreenPosition_DF5CB423_Out_0[1];
                float _Split_645B1D36_B_3 = _ScreenPosition_DF5CB423_Out_0[2];
                float _Split_645B1D36_A_4 = _ScreenPosition_DF5CB423_Out_0[3];
                float _Subtract_8127378B_Out_2;
                Unity_Subtract_float(_SceneDepth_9A3A7120_Out_1, _Split_645B1D36_A_4, _Subtract_8127378B_Out_2);
                float _Property_CF5C73F5_Out_0 = Vector1_3FA1EBE5;
                float _Multiply_9BDCF9C9_Out_2;
                Unity_Multiply_float(_Subtract_8127378B_Out_2, _Property_CF5C73F5_Out_0, _Multiply_9BDCF9C9_Out_2);
                float _Saturate_F94D553E_Out_1;
                Unity_Saturate_float(_Multiply_9BDCF9C9_Out_2, _Saturate_F94D553E_Out_1);
                float _Multiply_503736F2_Out_2;
                Unity_Multiply_float(_Smoothstep_261571F5_Out_3, _Saturate_F94D553E_Out_1, _Multiply_503736F2_Out_2);
                surface.Alpha = _Multiply_503736F2_Out_2;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


            struct VertexOutput
            {
                float2 uv           : TEXCOORD0;
                float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv1 = v.texcoord1;

                VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.WorldSpaceTangent = WorldSpaceTangent;
                vdi.WorldSpaceBiTangent = WorldSpaceBiTangent;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.TimeParameters = _TimeParameters.xyz;

                VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

                // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv1 = uv1;

                o.clipPos = TransformObjectToHClip(v.vertex.xyz);
                return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.TimeParameters = _TimeParameters.xyz;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }
            ENDHLSL
        }
    }
    FallBack "Hidden/InternalErrorShader"
}
